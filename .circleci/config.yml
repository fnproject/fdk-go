version: 2.1
orbs:
  anchore: anchore/anchore-engine@1.3.0
jobs:
  "test":
    docker:
      - image: circleci/golang:1.12.4
    working_directory: ~/fdk-go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker pull fnproject/fnserver
      - run:
          command: go test -v ./...
      - deploy:
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" && -z "${CIRCLE_PR_REPONAME}" ]]; then
              printenv DOCKER_PASS | docker login -u ${DOCKER_USER} --password-stdin
              git config --global user.email "ci@fnproject.com"
              git config --global user.name "CI"
              git branch --set-upstream-to=origin/${CIRCLE_BRANCH} ${CIRCLE_BRANCH}
            fi

  "go1_stretch_security_check":
    executor: anchore/anchore_engine
    working_directory: ~/fdk-go
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Golang 1 Stretch build
          command: |
            apk add bash
            ./build-images.sh 1 stretch
      - anchore/analyze_local_image:
          image_name: "fnproject/go:1-stretch fnproject/go:1-stretch-dev"
          timeout: '500'
          policy_failure: true
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
      - anchore/parse_reports

  "go1_alpine_security_check":
    executor: anchore/anchore_engine
    working_directory: ~/fdk-go
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Golang 1 Alpine 3.8 build
          command: |
            apk add bash
            ./build-images.sh 1 alpine
      - anchore/analyze_local_image:
          image_name: "fnproject/go:1-alpine fnproject/go:1-alpine-dev"
          timeout: '500'
          policy_failure: true
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
      - anchore/parse_reports

workflows:
  version: 2
  build:
    jobs:
      - "test"
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - "test"
      - "go1_stretch_security_check"
      - "go1_alpine_security_check"
