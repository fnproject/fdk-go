name: fdk-go
phoneBookId: functions
team: Functions
description: FDK Go build
runnerTag: latest
version: 0 # Set by set_fdk_version and the setup_*_image steps, needs to be present here anyway
releaseBranches: ["master"]
triggerOnCommitBranches: ["master", "pull-requests", "*"]

buildImageVersion: ""
runtimeImageVersion: ""
fdkVersion: ""

authCompartmentOcid: ocid1.compartment.oc1..aaaaaaaajnvcjjwfciaef2iaofrv5oq5yupxaivpzy7qrheify3lh42po27q

variables: {
    HTTP_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
    HTTPS_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
    NO_PROXY: "localhost,127.0.0.1,.us.oracle.com,.oraclecorp.com"
}

steps: [
  ### Build FDK ###
  {
    name: set_fdk_version
    type: make
    makeCommands: [
      { target: "set_fdk_version", args: "-f internal/Makefile" }
    ]
    artifacts: [
      "**"
    ]
  },
  {
    name: unit_test
    type: golang
    dependsOn: set_fdk_version
    goCommands: [
      { command: "test", args: "-v ./..." }
    ]
    artifacts: [
      "**"
    ]
  },

  ### Go 1.19 Images ###
  {
    name: setup_go1.19_build_image
    type: make
    dependsOn: set_fdk_version
    environment: {
      GO_VERSION: "1.19"
      VERSION_SUFFIX: "dev"
    }
    makeCommands: [
      { target: "set_image_version", args: "-f internal/Makefile" }
    ]
    artifacts: [
      "**"
    ]
    },
    {
      name: build_image_go1.19
      type: dockerizer
      dependsOn: setup_go1.19_build_image,
      dockerFile: "./internal/images/build/1.19/Dockerfile.bs"
      dockerBuildPwd: "./internal/images/build/1.19"
      environment: {
        DOCKER_BUILDKIT: "1"
      }
      dockerBuildArgs: {
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
      }
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: publish_build_image_go1.19
      type: publishdocker
      skipOnDryRun: false
      dependsOn: build_image_go1.19
      imageName: "fdk-go"
      repository: odo-docker-signed-local
      artifacts: [
        "**"
      ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
      name: fixup_version_build1.19
      type: make
      dependsOn: publish_build_image_go1.19
      makeCommands: [
        { target: "set_fdk_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: setup_go1.19_runtime_image
      type: make
      dependsOn: set_fdk_version
      environment: {
        GO_VERSION: "1.19"
      }
      makeCommands: [
        { target: "set_image_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: runtime_image_go1.19
      type: dockerizer
      dependsOn: setup_go1.19_runtime_image,
      dockerFile: "./internal/images/runtime/1.19/Dockerfile"
      dockerBuildPwd: "./internal/images/runtime/1.19"
      environment: {
        DOCKER_BUILDKIT: "1"
      }
      dockerBuildArgs: {
          HTTP_PROXY: ${HTTP_PROXY}
          HTTPS_PROXY: ${HTTPS_PROXY}
          NO_PROXY: ${NO_PROXY}
      }
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: publish_runtime_image_go1.19
      type: publishdocker
      skipOnDryRun: false
      dependsOn: runtime_image_go1.19
      imageName: "fdk-go"
      repository: odo-docker-signed-local
      artifacts: [
        "**"
      ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
      name: fixup_version_runtime1.19
      type: make
      dependsOn: publish_runtime_image_go1.19
      makeCommands: [
        { target: "set_fdk_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
        "**"
      ]
    },    
    {
      name: setup_test_image_build1.19
      type: make
      dependsOn: [unit_test, fixup_version_build1.19, fixup_version_runtime1.19]
      environment: {
        GO_VERSION: "1.19"
        TEST_DIR: ${BLD_INPUT_DIR}"/internal/tests-images/go1.19"
      }
      makeCommands: [
        { target: "setup_test_image_build", args: "-f internal/Makefile" }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: build_test_image_runtime_version_test_1.19
      type: dockerizer
      dependsOn: setup_test_image_build1.19
      dockerBuildArgs: {
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
        BUILD_IMAGE_VERSION: ${buildImageVersion}
        RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
      }
      dockerFile: "./internal/tests-images/go1.19/runtime-version-test/Build_file.bs"
      dockerBuildPwd: "./internal/tests-images/go1.19/runtime-version-test"
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    
    ### Go 1.20 Images ###
    {
      name: setup_go1.20_build_image
      type: make
      dependsOn: set_fdk_version
      environment: {
          GO_VERSION: "1.20"
          VERSION_SUFFIX: "dev"
      }
      makeCommands: [
          { target: "set_image_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: build_image_go1.20
      type: dockerizer
      dependsOn: setup_go1.20_build_image,
      dockerFile: "./internal/images/build/1.20/Dockerfile.bs"
      dockerBuildPwd: "./internal/images/build/1.20"
      environment: {
        DOCKER_BUILDKIT: "1"
      }
      dockerBuildArgs: {
          HTTP_PROXY: ${HTTP_PROXY}
          HTTPS_PROXY: ${HTTPS_PROXY}
          NO_PROXY: ${NO_PROXY}
      }
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: publish_build_image_go1.20
      type: publishdocker
      skipOnDryRun: false
      dependsOn: build_image_go1.20
      imageName: "fdk-go"
      repository: odo-docker-signed-local
      artifacts: [
          "**"
      ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
      name: fixup_version_build1.20
      type: make
      dependsOn: publish_build_image_go1.20
      makeCommands: [
          { target: "set_fdk_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: setup_go1.20_runtime_image
      type: make
      dependsOn: set_fdk_version
      environment: {
          GO_VERSION: "1.20"
      }
      makeCommands: [
          { target: "set_image_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: runtime_image_go1.20
      type: dockerizer
      dependsOn: setup_go1.20_runtime_image,
      dockerFile: "./internal/images/runtime/1.20/Dockerfile"
      dockerBuildPwd: "./internal/images/runtime/1.20"
      environment: {
        DOCKER_BUILDKIT: "1"
      }
      dockerBuildArgs: {
          HTTP_PROXY: ${HTTP_PROXY}
          HTTPS_PROXY: ${HTTPS_PROXY}
          NO_PROXY: ${NO_PROXY}
      }
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: publish_runtime_image_go1.20
      type: publishdocker
      skipOnDryRun: false
      dependsOn: runtime_image_go1.20
      imageName: "fdk-go"
      repository: odo-docker-signed-local
      artifacts: [
          "**"
      ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
      name: fixup_version_runtime1.20
      type: make
      dependsOn: publish_runtime_image_go1.20
      makeCommands: [
          { target: "set_fdk_version", args: "-f internal/Makefile" }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: setup_test_image_build1.20
      type: make
      dependsOn: [unit_test, fixup_version_build1.20, fixup_version_runtime1.20]
      environment: {
        GO_VERSION: "1.20"
        TEST_DIR: ${BLD_INPUT_DIR}"/internal/tests-images/go1.20"
      }
      makeCommands: [
        { target: "setup_test_image_build", args: "-f internal/Makefile" }
      ]
      artifacts: [
          "**"
      ]
    },
    {
      name: build_test_image_hello_world_test_1.20
      type: dockerizer
      dependsOn: setup_test_image_build1.20
      dockerBuildArgs: {
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
        BUILD_IMAGE_VERSION: ${buildImageVersion}
        RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
      }
      dockerFile: "./internal/tests-images/go1.20/hello-world-test/Build_file.bs"
      dockerBuildPwd: "./internal/tests-images/go1.20/hello-world-test"
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: build_test_image_oci_sdk_test_1.20
      type: dockerizer
      dependsOn: setup_test_image_build1.20
      dockerBuildArgs: {
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
        BUILD_IMAGE_VERSION: ${buildImageVersion}
        RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
      }
      dockerFile: "./internal/tests-images/go1.20/oci-sdk-test/Build_file.bs"
      dockerBuildPwd: "./internal/tests-images/go1.20/oci-sdk-test"
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: build_test_image_runtime_version_test_1.20
      type: dockerizer
      dependsOn: setup_test_image_build1.20
      dockerBuildArgs: {
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
        BUILD_IMAGE_VERSION: ${buildImageVersion}
        RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
      }
      dockerFile: "./internal/tests-images/go1.20/runtime-version-test/Build_file.bs"
      dockerBuildPwd: "./internal/tests-images/go1.20/runtime-version-test"
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
    {
      name: build_test_image_timeout_test_1.20
      type: dockerizer
      dependsOn: setup_test_image_build1.20
      dockerBuildArgs: {
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
        BUILD_IMAGE_VERSION: ${buildImageVersion}
        RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
      }
      dockerFile: "./internal/tests-images/go1.20/timeout-test/Build_file.bs"
      dockerBuildPwd: "./internal/tests-images/go1.20/timeout-test"
      images: [
        {
          platform: "linux/x86_64"
        },
        {
          platform: "linux/arm64"
        }
      ]
      artifacts: [
        "**"
      ]
    },
]